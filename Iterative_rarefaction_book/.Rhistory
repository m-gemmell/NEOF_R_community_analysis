#Summarise the phyloseq object ####
#Install BiocManager
install.packages("BiocManager")
library(BiocManager)
#Install phyloseq
#https://joey711.github.io/phyloseq/install.html
BiocManager::install('phyloseq')
#Summarise the phyloseq object ####
#Install BiocManager
install.packages("BiocManager", INSTALL_opts = "--no-lock")
install.packages("BiocManager", INSTALL_opts = "--no-lock")
library(BiocManager)
#Summarise the phyloseq object ####
#Install BiocManager
install.packages("BiocManager", INSTALL_opts = "--no-lock")
install.packages("BiocManager", INSTALL_opts = "--no-lock")
#Summarise the phyloseq object ####
#Install BiocManager
install.packages("BiocManager", INSTALL_opts = "--no-lock")
library(BiocManager)
#Summarise the phyloseq object ####
#Install BiocManager
install.packages("BiocManager", INSTALL_opts = "--no-lock")
BiocManager::install(version="3.16")
library(BiocManager)
#Ensure it is installed as version 3.16
BiocManager::install(version="3.16")
#Install phyloseq
#https://joey711.github.io/phyloseq/install.html
BiocManager::install('phyloseq')
#Install microbiome package
BiocManager::install("microbiome")
library("microbiome")
install.packages("rlang")
install.packages("rlang")
library("phyloseq")
#Install some problem pacages
packages_vector <- c("rlang", "vctrs")
#Install some problem pacages
problem_pckgs <- c("rlang", "vctrs")
install.packages(problem_pckgs)
install.packages(problem_pckgs)
install.packages(problem_pckgs)
install.packages(problem_pckgs)
#Set you R library site to a relvent place in your home directory
R_LIBS_SITE="F:/R/library"
#Install qiime2r package
#https://github.com/jbisanz/qiime2R
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
install.packages("devtools")
#Ensure to run RStudio as administrator
#Set you R library site to a relvent place in your home directory
R_LIBS_SITE="F:/R/library"
#Install qiime2r package
#https://github.com/jbisanz/qiime2R
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
#Install qiime2r package
#https://github.com/jbisanz/qiime2R
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
#Install BiocManager
install.packages("BiocManager")
#Ensure it is installed as version 3.16
BiocManager::install(version="3.16")
library(BiocManager)
#Install phyloseq
#https://joey711.github.io/phyloseq/install.html
BiocManager::install('phyloseq')
1e-1
1e-2
1e-2
install.packages("bookdown")
install.packages("renv")
pie
pie
pi
pi * 25
border <- opq(bbox = "New Mexico") %>%
osmdata::osmdata_sf()
#Libraries
library(tidyverse)
library(osmdata) # package for working with streets
library(showtext) # for custom fonts
library(ggmap)
library(rvest)
library(sf)
#New mexico colour palette
NM_brown <- "#665600"
NM_red <- "#bf0a30"
NM_blue <- "#40e0d0"
NM_yellow <- "#ffd700"
NM_maroon <- "#4c0413"
#Get new Mexico area as polygon
NM_area <- osmdata::getbb("New Mexico")
NM <- osmdata::getbb("New Mexico", format="polygon")
#Extract border of New Mexico
border <- opq(bbox = "New Mexico") %>%
osmdata::osmdata_sf()
#Get border
boundaries <- opq(bbox = 'New Mexico') %>%
add_osm_feature(key = 'admin_level', value = '7') %>%
osmdata_sf %>% unique_osmdata
qtm(boundaries$osm_multipolygons[5,])
install.packages("tmap")
library(tmap)
qtm(boundaries$osm_multipolygons[5,])
tmap_mode('view')
qtm(boundaries$osm_multipolygons[5,])
View(boundaries)
qtm(boundaries$osm_multipolygons)
map_plot <- ggplot() +
geom_polygon(boundaries)
boundaries
map_plot <- ggplot() +
geom_polygon(boundaries$osm_polygons)
boundaries$osm_polygons
boundaries$osm_multipolygons[5,]
boundaries$osm_multipolygons
qtm(boundaries$osm_multipolygons)
#Need to set tmap mode to plot
tmap_mode("plot")
qtm(boundaries$osm_multipolygons)
qtm(boundaries$osm_multipolygons)
boundaries$osm_multipolygons
boundaries <- opq(bbox = 'Bilbao, Spain') %>%
add_osm_feature(key = 'admin_level', value = '7') %>%
osmdata_sf %>% unique_osmdata
qtm(boundaries$osm_multipolygons[5,])
boundaries$osm_multipolygons[5,]
boundaries$osm_multipolygons
tmap_mode("plot")
qtm(boundaries$osm_multipolygons)
#Extract border of New Mexico
#Get border
boundaries <- opq(bbox = 'New Mexico') %>%
add_osm_feature(key = 'admin_level', value = '7') %>%
osmdata_sf %>% unique_osmdata
install.packages("usmap")
library(usmap)
state_border <- us_map(include = "NM")
View(state_border)
map_plot <- ggplot() +
geom_polygon(boundaries$osm_polygons, aes(x = x, y = y))
map_plot <- ggplot() +
geom_polygon(data = state_border, aes(x = x, y = y, group = group), fill = NA, color = "black")
ggsave("NM_map.png", plot = map_plot,
device = "png", dpi = 300, units = "mm", height = 297, width = 210)
map_plot <- ggplot() +
geom_polygon(data = state_border, aes(x = x, y = y, group = group), fill = NA, color = "red")
map_plot
state_border
View(state_border)
state_border$geom
install.packages("geobr")
#Try geobr for map border
library(geobr)
NM_border <- read_state(code_state = "NM", year=2020)
set.seed(1234)
sample(x=1:100000, size = 10, replace = FALSE)
set.seed(NULL)
6*6*6
install.packages("bookdown")
install.packages("webexercises")
#Icons, below code also included in that section in this guide
install.packages("remotes")
remotes::install_github("mitchelloharawild/icons")
#Download icon sets
icons::download_fontawesome()
icons::download_ionicons()
icons::download_bioicons()
install.packages("tidyverse")
library(tidyverse)
ggplot(data = penguin)
# Load packages ####
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
ggplot(data = penguin)
ggplot(data = penguins)
# add mappings
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
## geom_point
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
## Colour points by species
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point()
## Line to display relationship
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point() +
geom_smooth(method = "lm")
## Local color aestheitic to geom_point
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species)) +
geom_smooth(method = "lm")
## Shape aesthetic to geom_point
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm")
## Labels and colour blind friendly palette
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
## Labels and colour blind friendly palette
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
gthemes::scale_color_colorblind()
## Labels and colour blind friendly palette
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
ggthemes::scale_color_colorblind()
str(penguins)
?penguins
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill length (mm)", y = "Bill depth (g)",
color = "Species", shape = "Species"
) +
ggthemes::scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth() +
labs(
title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill length (mm)", y = "Bill depth (g)",
color = "Species", shape = "Species"
) +
ggthemes::scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = species, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth() +
labs(
title = "Bill depth and species",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Species", y = "Bill depth (g)",
color = "Species", shape = "Species"
) +
ggthemes::scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = species, y = bill_depth_mm)
) +
geom_boxplot(mapping = aes(color = species, shape = species)) +
labs(
title = "Bill depth and species",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Species", y = "Bill depth (g)",
color = "Species", shape = "Species"
) +
ggthemes::scale_color_colorblind()
ggplot(data = penguins) +
geom_point()
ggplot(data = penguins,
mapping = aes(x = species, y = bill_depth_mm)) +
geom_point()
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE)
geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +
labs(caption = "Data come from the palmerpenguins package.")
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE)
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +
labs(caption = "Data come from the palmerpenguins package.")
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = bill_depth_mm, shape = species)) +
geom_smooth(method = "lm") +
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = bill_depth_mm, shape = species)) +
geom_smooth()
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = bill_depth_mm)) +
geom_smooth()
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_smooth(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
#Make our code more concise
#long
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
#concise
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = species)) +
geom_bar()
#Reorder factors in ggplot2 by frequency
#Looks very useful for bar charts
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 20)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 2000)
#Density plot
ggplot(penguins, aes(x = body_mass_g)) +
geom_density()
ggplot(penguins, aes(y = species)) +
geom_histogram()
ggplot(penguins, aes(y = species)) +
geom_bar()
ggplot(penguins, aes(x = species)) +
geom_bar(color = "red")
ggplot(penguins, aes(x = species)) +
geom_bar(fill = "red")
ggplot(diamonds, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
diamonds
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 200)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 20)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 0.2)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 50)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(bins = 25)
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species)) +
geom_density(linewidth = 0.75)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(alpha = 0.5)
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
data()
ChickWeight
Seatbelts
install.packages("languageserver")
install.packages("remotes")
remotes::install_github("m-gemmell/mgrtibbles")
library(mgrtibbles)
mgrtibbles::crab_age_pred_tbl
setwd("F:/Git/NEOF_R_community_analysis/Iterative_rarefaction_book")
bookdown::render_book("01-Iterative_rarefaction_intro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-Iterative_rarefaction_intro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-Iterative_rarefaction_intro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-Iterative_rarefaction_intro.Rmd", "bookdown::gitbook")
