{
  "hash": "1b9f74c48323e8419cd1ca0448fb2106",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Starting\"\nengine: knitr\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n\n<center>\n![](figures/start.png){style=\"width:200px\"}\n</center>\n\n## Linux access\n\nPrior to running through these materials you will need to have acces to a Linux terminal. The 2 main methods are a terminal on your own computer or connecting to remote a machine such as an HPC. Below are a variety of methods to gain this.\n\n### Computer terminal\n\nDepending on the OS you are using there are differetn ways to access a temrinal.\n\n#### Windows\n\nWindows has a terminal but it is not Linux based. You can install a subsystem of Linux to use Linux on your windows machine. This is carried out with WSL(Windows Subsystem for Linux). The following is a link on how to install WSL: [Windows install WSL](https://learn.microsoft.com/en-us/windows/wsl/install) \n\n#### Linux & macOS\n\nIf you are using a Linux or macOS machine you can use the terminal to carry out Linux commands.\nThis is possible as macOS is a Unix-based system.\n\nIf you would like to install and use a Linux OS we recommend Linux Mint. The following link is a guide to install Mint Linux:  \n[Mint Linux install](https://linuxmint-installation-guide.readthedocs.io/en/latest/)\n\n### Remote access\n\nFor remote access you can use a terminal to `ssh` to the remote machine.\n\nIf you are on a windows machine you may need to download a terminal program to `ssh` to a linux cluster. Below are a few suggestions of windows terminals:\n\n-   [MobaXterm](https://mobaxterm.mobatek.net/)\n-   [Putty](https://www.putty.org/)\n\n#### ssh\n<center>\n![](figures/turtle_shell.png){style=\"width:100px; background: white; border-radius:15px; border: white solid 5px\"}\n</center>\n\nThe `ssh` (Secure Shell Protocol) command is used to login into cluster and other machines. For more information on this please see the following online tutorial: [ssh tutorial](https://opensource.com/article/20/9/ssh)\n\n#### File transferring\n<center>\n![](figures/file_transfer.png){style=\"width:100px; background: white; border-radius:15px; border: white solid 5px\"}\n</center>\n\nWhen working with a remote cluster you will most likely want to transfer files from your computer to the cluster and vice versa.\n\nFor transferring on windows machine I would suggest [WinSCP](https://winscp.net/eng/index.php).\n\nFor transferring on macOS & Linux I would suggest [FileZilla](https://filezilla-project.org/)\n\n## The Terminal Window\n\nYour terminal may look similar to the below image. We are using the terminal window as our shell to interpret our commands to the kernel. Depending on your system and preferences it will most likely look different.\n\n<center>\n![](figures/terminal_window.png){style=\"width:800px\"}\n</center>\n\nAlready there is useful information for us on the terminal window.\n\n-   **nsc206**: This is the login name, also known as the username. In this case nsc206 is a demonstrator's account. Your screen should show a different account name which will be your username for the Linux machine/cluster you are logged into.\n-   **ada02**: This is the machine name the user is logged into.\n-   **\\~**: This represents the current directory of the user, or the directory a command was run in. In the Linux OS and others **'\\~'** is a short cut to the user's home directory.\n-   Everything after the **'\\$'** is where commands are typed into the terminal. This is also referred to as the command line.\n\nTo open a new terminal window, right click on the main screen, choose `Applications` -\\> `Shell` -\\> `bash`\n\n## Commands\n\nCommands are typed into the terminal and then run by pressing **\"enter\"**\"\n\n<center>\n![](figures/enter_symbol.png){style=\"width:100px; background: white; border-radius:15px; border: white solid 5px\"}\n</center>\n\nTo run a command select your terminal by clicking on it or using **\"alt+shift\"**.\n\nNow run the below command:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"Hello World\"\n```\n:::\n\n\n\n\nIn this case `echo` is a command that prints out the term \"Hello World\".\n\nNow try:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"Bye World\"\n```\n:::\n\n\n\n\nThere are many different Linux commands and we will run through a few. With a large variety it can be hard to remember all the commands and how they work.\n\nThree convenient resources are:\n\n1.  **Search engines** (e.g. Google): There are many forums where people ask for help with command line issues. If you have an issue and are not sure what to do, most likely someone else has had the same issue and asked for help on a forum. The tricky part of this is knowing the specific terminology to use when searching. Forums where people ask bioinformatics questions include SEQanswers, Stack overflow and biostars.\n2.  **Cheat sheets**: It is never wrong to \"cheat\" when coding. Cheat sheets with many commands and good descriptions are very useful. Here is a good example of one: <https://files.fosswire.com/2007/08/fwunixref.pdf>\n3.  **Manual pages**: Linux commands have many different parameters and options. If you ever need to figure out what they all are and what they do you can use the `man` command.\n\nE.g. The below command will show the manual page for the echo command:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman echo\n```\n:::\n\n\n\n\nThe below command will show the manual page for the `man` command:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman man\n```\n:::\n\n\n\n\n**Note**: The `man` page acts like using the command **less** (we will get into more specifics later). Important notes for now are to use the **arrow keys** to go **up** and **down** the page and press **q** to exit the manual\n\n**Note**: There is a cheat sheet at the end of this document with all the commands covered in this practical.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}