{
  "hash": "0727c55a2ed73175062c91b3b4009668",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"File reading and processing\"\nengine: knitr\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n\n<center>\n![](figures/files.png){style=\"width:200px\"}\n</center>\n\nThere are many ways to show the contents of a file. Below are a few examples.\n\nThe files for the examples are within the directory: **\"/pub14/tea/nsc2xx/Linux/5_reading_files/\"** **(replace xxx with your user number)**.\n\n[YouTube walk through video](https://www.youtube.com/embed/rldLi1yAE58)\n\n## Print out a file\n<center>\n![](figures/cat.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nThe `cat` command will print out the entire contents of a file to the screen. This is useful for small text files and pipelines (pipelines are not covered here). Example commands are below (remember to replace xxx with your user name number):\n\n**Note**: remember tab complete and using the arrow keys\n\nPrint contents of **\"short_file.txt\"** to screen\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat ~/Linux/5_reading_files/short_file.txt\n```\n:::\n\n\n\n\nPrint contents of **\"Scientist.txt\"** to screen\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat ~/Linux/5_reading_files/Scientist.txt\n```\n:::\n\n\n\n\nPrint contents of **\"ecoli.gbk\"** to screen\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat ~/Linux/5_reading_files/ecoli.gbk\n```\n:::\n\n\n\n\n**Remember**: The `clear` command.\n\n## head and tail\n<center>\n![](figures/head_and_tails.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nThe `head` command will print out to screen the top n lines of a file.\n\nThe `tail` command will print out to screen the bottom n lines of a file.\n\nThe default value is 10. The `-n` option can be used to indicate how many lines to print out.\n\nCarry out the below commands in the directory **\"/pub14/tea/nsc2xx/Linux/5_reading_files/\"**\n\nPrint out the top 10 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead ecoli.gbk\n```\n:::\n\n\n\n\nPrint out the bottom 10 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail ecoli.gbk\n```\n:::\n\n\n\n\nPrint out the top 25 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n 25 ecoli.gbk\n```\n:::\n\n\n\n\nPrint out the bottom 2 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n 2 ecoli.gbk\n```\n:::\n\n\n\n\nPrint out all but the bottom 2 lines of **\"Scientist.txt\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n -2 Scientist.txt\n```\n:::\n\n\n\n\nPrint out all lines starting from the 2nd top line of **\"Scientist.txt\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n +2 Scientist.txt\n```\n:::\n\n\n\n\nPrint out all but the bottom 5 lines of **\"Scientist.txt\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n -5 Scientist.txt\n```\n:::\n\n\n\n\nPrint out all lines starting from the 3rd top line of **\"Scientist.txt\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n +3 Scientist.txt\n```\n:::\n\n\n\n\nPrint out the top 25 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n +25 ecoli.gbk\n```\n:::\n\n\n\n\nPrint out the bottom 2 lines of **\"ecoli.gbk\"**\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n -2 ecoli.gbk\n```\n:::\n\n\n\n\n## File viewing with less\n<center>\n![](figures/less.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nThe `less` command will display a file's contents one page at a time. Various keys on the keyboard will allow you to navigate the contents of the files. The below actions will occur identically with the man command.\n\n-   **q** : Exit\n-   **up and down arrow keys** : Will move up/down 1 line at a time\n-   **space** : Move down one page\n-   **b** : Move up one page\n-   **`/`** : Follow this by a term to search for it in the file's contents\n-   **n** : Find the next occurrence of the term last searched for\n-   **N** : Find the previous occurrence of the term last searched for\n-   **g** : Jump to the first line of the file\n-   **G** : Jump to the bottom line of the file\n\nUse the `less` command to view the contents of the **\"ecoli.gbk\"** file. Then find the 3rd occurrence of the word 'ribosome'. Afterwards move around the file.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless ecoli.gbk\n```\n:::\n\n\n\n\nLook at the `man`ual for `less` and search for the first occurrence of the string 'percent'. Afterwards look around the manual page.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman less\n```\n:::\n\n\n\n\n## Word count\n<center>\n![](figures/wc.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nThe `wc` command will allow allow you to word count files. It will display line, word and byte counts for files in that order.\n\nUse `wc` to see the line, word and byte count of the **\"short_file.txt\"** and **\"ecoli.gbk\"** files. As you can see you can carry this out on multiple files at once.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc short_file.txt Scientist.txt ecoli.gbk\n```\n:::\n\n\n\n\nCount the number of characters in the **\"short_file.txt\"** file\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -m short_file.txt\n```\n:::\n\n\n\n\nCount the number of lines in the **\"ecoli.gbk\"** file\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l ecoli.gbk\n```\n:::\n\n\n\n\n## Pattern searching\n<center>\n![](figures/pattern.png){style=\"width:200px; background: white; border-radius:15px\"}\n</center>\n\nThe `grep` command will search for a pattern in a text file and output all the lines containing the pattern.\n\nPrint out the lines from **\"Scientist.txt\"** that have the number 18 in them. In this particular example it prints out all scientists which were born in the 1800s. This will not always be the case depending on the data in the file.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep “18” Scientist.txt\n```\n:::\n\n\n\n\nPrint out the lines which have the string \"Ada\" in them.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep “Ada” Scientist.txt\n```\n:::\n\n\n\n\nPrint out the lines which have the string \"ada\" in them. There should be none, as grep is case sensitive.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep “ada” Scientist.txt\n```\n:::\n\n\n\n\nType in the following command.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep Scientist.txt\n```\n:::\n\n\n\n\nThe above command will be stuck as `grep` does not know what it is looking for. To cancel the command use **'Ctrl' + 'c'**\n\n## Text editor\n<center>\n![](figures/text_editor.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nThree of the most popular text editors are **vim**, **gedit** and **nano**. Below are quick introductions to **nano** and **vim**.\n\n**nano** is the easiest to learn but is quite limiting. **vim** and **gedit** are quite similar in power with different people preferring one or the other.\n\nThe below will teach you **nano**.\n\n### nano\n<center>\n![](figures/1200px-Gnu-nano.png){style=\"width:200px; background:white; border-radius:15px\"}\n</center>\n\nTo enter the `nano` text editor you can use the command `nano`. The command is: `nano file.txt`.\n\n`nano` can be run with a previous file name which you can then edit or a new file name in which case you will create a new file.\n\nOnce you are in the editor you can type characters and move around with the arrow keys.\n\nTo carry out specific functions you will need to use **Ctrl** or **Alt** with another key. At the bottom of the editor are a few examples where the `^` indicates **Ctrl**. For example the `^G Get Help` means you need to press **Ctrl+G** to get help. When you use letters this way in **nano** they are case insensitive (i.e. the CAPS lock can be on or off and you will get the same result).\n\nAfter you carry out a function ensure you look at the bottom of the editor again as it may ask you to type something or you may get a new series of functions you can use.\n\nBelow are some important examples:\n\n-   **Ctrl+X** - Exit nano\n-   **Ctrl+S** - Save file\n-   **Ctrl+O** - Save file as\n-   **Ctrl+A** - Jump to the start of a line\n-   **Ctrl+E** - Jump to the end of a line\n-   **Ctrl+W** - Start search (Where is) **Note** This unfortunately is also the shortcut to close a tab in internet browsers. Therefore this can't be used with our webVNC.\n-   **Alt+W** - Continue search forward (find next occurrence forward)\n-   **Alt+Q** - Find next occurrence backward\n-   **Alt+K** - Cut current line\n-   **Alt+\\\\** - Go to the first line\n-   **Alt+/** - Go to the last line\n\n[**Nano cheatsheet**](https://www.nano-editor.org/dist/latest/cheatsheet.html)\n\n### Tasks\n\nCarry out the following tasks in the directory: **\"~/Linux/5_reading_files/\"**\n\nUsing `nano`, add an entry for Scientist Mae Jemison (Born: 1956) to the file **\"Scientist.txt\"**. The names and date are separated by one tab.\n\nUsing your text editor of choice delete all the scientists born before 1000 in the **\"Scientist.txt\"** file and save this as **\"Scientist_post_1000.txt\"**.\n\n## MCQs: File reading and processing\n<center>\n![](figures/question_bubble_purple.png){style=\"width:200px\"}\n</center>\n\nPlease attempt to answer the below Multiple-Choice Questions to reinforce what you have learnt in this chapter.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n1.  What command searches for a pattern? <div class='webex-radiogroup' id='radio_KHBQNSJXKD'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KHBQNSJXKD\" value=\"\"></input> <span>__`wc`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KHBQNSJXKD\" value=\"answer\"></input> <span>__`grep`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KHBQNSJXKD\" value=\"\"></input> <span>__`cat`__</span></label></div>\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n2.  What command word counts files? <div class='webex-radiogroup' id='radio_PHWHPQZMMQ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHWHPQZMMQ\" value=\"answer\"></input> <span>__`wc`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHWHPQZMMQ\" value=\"\"></input> <span>__`grep`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHWHPQZMMQ\" value=\"\"></input> <span>__`cat`__</span></label></div>\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n3.  What command prints the contents of a file?<div class='webex-radiogroup' id='radio_PUCQVNEOQM'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PUCQVNEOQM\" value=\"\"></input> <span>__`wc`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PUCQVNEOQM\" value=\"\"></input> <span>__`grep`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PUCQVNEOQM\" value=\"answer\"></input> <span>__`cat`__</span></label></div>\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n4.  What command displays a file's contents one page at a time and allows keyboard navigation? <div class='webex-radiogroup' id='radio_ZOXNHSHDAW'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZOXNHSHDAW\" value=\"answer\"></input> <span>__`less`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZOXNHSHDAW\" value=\"\"></input> <span>__`tail`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZOXNHSHDAW\" value=\"\"></input> <span>__`head`__</span></label></div>\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n5.  What command prints out the top n lines of a file <div class='webex-radiogroup' id='radio_NXCPNBQJFB'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NXCPNBQJFB\" value=\"\"></input> <span>__`less`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NXCPNBQJFB\" value=\"\"></input> <span>__`tail`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NXCPNBQJFB\" value=\"answer\"></input> <span>__`head`__</span></label></div>\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n6.  What command prints out the bottom n lines of a file<div class='webex-radiogroup' id='radio_PHRKIFIMEG'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHRKIFIMEG\" value=\"\"></input> <span>__`less`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHRKIFIMEG\" value=\"answer\"></input> <span>__`tail`__</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_PHRKIFIMEG\" value=\"\"></input> <span>__`head`__</span></label></div>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}